# 3. Есть два списка: tutors - имена учеников, groups - названия их классов. Необходимо реализовать генератор или функцию-генератор, возвращающий кортежи вида '(<tutor>, <group>)'.
# Техническое задание
#
# Функция (или генератор) должна работать со списками любой длины.
# Количество генерируемых кортежей не должно быть больше длины списка tutors.
#
# Если в списке groups меньше элементов, чем в списке tutors,
# необходимо вывести последние кортежи в виде: '(<tutor>, None)', например: '('Станислав', None)'
#
# Если в списке tutors меньше элементов, чем в списке groups, то смотри пункт 2.
# Генератор возвращает кортежи указанного вида.
# Доказать, что вы создали именно генератор. Вывести все его значения на экран.
# Не используйте в этом задании функции zip и zip_longest.
# Не меняйте исходные списки tutors и groups и не создавайте новых списков.
#
# Подтвердите работоспособность(выведите в консоль результаты) для обоих вариантов:
# groups меньше tutors и tutors меньше groups.
#
# Примечание:
#
# Сделать эту задачу через функцию-генератор проще.
# Если сделали, попробуйте сделать именно через генераторное выражение, т.е. «в одну строку».
# Примеры/Тесты:
#
#
# tutors = [
#     'Иван', 'Анастасия', 'Петр', 'Сергей',
#     'Дмитрий', 'Борис', 'Елена'
# ]
# groups = [
#     '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
# ]
#
# Результат, где учеников меньше
#
#
# Ученики: ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# Классы: ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
# Тип объекта: <class 'generator'>
# Все значения генератора:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ('Петр', '9Б')
# ('Сергей', '9В')
# ('Дмитрий', '8Б')
# ('Борис', '10А')
# ('Елена', '10Б')
#
# Результат, где учеников больше
#
#
# Ученики: ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# Классы: ['9А', '7В', '9Б', '9В']
# Тип объекта: <class 'generator'>
# Все значения генератора:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ('Петр', '9Б')
# ('Сергей', '9В')
# ('Дмитрий', None)
# ('Борис', None)
# ('Елена', None)


tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена'
]
groups = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А', '11c'
]


def school_generator(childrens, classes):
    for i, people in enumerate(childrens):
        if i <= len(classes):
            yield childrens[i], classes[i]
        else:
            yield childrens[i], None


# main()
gen2 = school_generator(tutors, groups)
print(f'Ученики: {tutors}')
print(f' Классы: {groups}')
print(f'Тип объекта: {type(gen2)}')
print(' Все значения генератора: ')

for person in gen2:
    print(person)
